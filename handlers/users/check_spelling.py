import re

import enchant
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import CallbackQuery
from aiogram.utils.exceptions import MessageIsTooLong
from loguru import logger

from keyboards.inline.cancel_keyboard_inline import keyboard_cancel
from keyboards.inline.text_actions_inline import text_actions_keyboard
from loader import dp, bot
from states.check_text_states import CheckText

checker = enchant.Dict('ru_RU')


# b = c.check('–≤–µ—Ä—Ç–∞–ª–µ—Ç')
# b = c.suggest('–≤–µ—Ç—Ä–æ–ª–µ—Ç')
# print(b)

async def text_checker(text_dict, normal_text, errors):
    text_dict = re.findall("[–∞-—è—ë]+|[a-z]+", str(text_dict))
    for i in text_dict:
        checker_text = checker.check(i)
        if checker_text is True:
            normal_text.append(i)
        elif checker_text is False:
            errors.append(i)


async def start_check_func(chat_id, message_id):
    await bot.edit_message_text(chat_id=chat_id, message_id=message_id,
                                text=f'üìù–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ç–µ–∫—Å—Ç, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞ –æ—à–∏–±–∫–∏'
                                     f'(–Ω–µ –±–æ–ª–µ–µ <b>4096</b> —Å–∏–º–≤–æ–ª–æ–≤!)\n\n'
                                     f'–ü–æ–∫–∞ —á—Ç–æ –±–æ—Ç –º–æ–∂–µ—Ç –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ',
                                reply_markup=keyboard_cancel)


@dp.message_handler(Command('check_spelling'))
async def start_check(message: types.Message):
    await start_check_func(chat_id=message.from_user.id, message_id=message.message_id)

    await CheckText.stage1.set()


@dp.callback_query_handler(text='check_spelling')
async def start_check(call: CallbackQuery):
    await start_check_func(chat_id=call.from_user.id, message_id=call.message.message_id)

    await CheckText.stage1.set()


@dp.message_handler(state=CheckText.stage1)
async def start_check(message: types.Message, state: FSMContext):
    text = message.text
    text_dict = text.split()
    logger.info(text_dict)
    normal_text = []
    errors = []
    try:
        await text_checker(text_dict=text_dict, normal_text=normal_text, errors=errors)
    except MessageIsTooLong:
        await state.reset_state()
    if len(errors) > 0:
        errors = "\n".join(errors)
        await message.reply(f'‚ö†Ô∏è<b>–û—à–∏–±–∫–∏: </b>‚ö†Ô∏è \n\n<code>{errors}</code>. \n\n–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ?',
                            reply_markup=text_actions_keyboard)
    elif len(errors) <= 0:
        await message.reply(f'‚òëÔ∏è–û—à–∏–±–æ–∫ –Ω–µ—Ç! –£—Ä–∞! \n\n–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ?',
                            reply_markup=text_actions_keyboard)
    await state.reset_state()


@dp.callback_query_handler(state='CheckText.stage1', text='cancel')
async def cancel_check_spelling(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text=f'‚ùóÔ∏è –í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å. ‚ùóÔ∏è\n\n–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ?',
                                 reply_markup=keyboard_cancel)
    await state.reset_state()


@dp.callback_query_handler(state='CheckText.stage2', text='cancel')
async def cancel_check_spelling1(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text=f'–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ –≥—Ä–∞–º–æ—Ç–Ω–æ—Å—Ç—å. –ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ?',
                                 reply_markup=keyboard_cancel)
    await state.reset_state()

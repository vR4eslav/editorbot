import os

import cv2
import pytesseract

# –ü—É—Ç—å –¥–ª—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è tesseract –¥–ª—è –≤–∏–Ω–¥–æ–≤—Å
from aiogram import types
from aiogram.dispatcher import FSMContext
from aiogram.dispatcher.filters import Command
from aiogram.types import ContentType, CallbackQuery

from keyboards.inline.cancel_keyboard_inline import keyboard_cancel
from keyboards.inline.text_actions_inline import text_actions_keyboard
from loader import dp, bot


# windows
# pytesseract.pytesseract.tesseract_cmd = 'C:\\Program Files\\Tesseract-OCR\\tesseract.exe'


async def text_downloader(message):
    user_id = message.from_user.id
    photo_path = f'data/temp_photo_to_text/{user_id}.jpg'
    await message.photo[-1].download(destination=photo_path)
    return photo_path


async def text_detector(photo):
    # –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ñ–æ—Ç–æ
    img = cv2.imread(photo)
    img = cv2.cvtColor(img, cv2.COLOR_BGR2RGB)

    # –ë—É–¥–µ—Ç –≤—ã–≤–µ–¥–µ–Ω –≤–µ—Å—å —Ç–µ–∫—Å—Ç —Å –∫–∞—Ä—Ç–∏–Ω–∫–∏
    config = r'--oem 3 --psm 6'
    text = pytesseract.image_to_string(img, config=config, lang='rus+eng')
    return text


@dp.callback_query_handler(text='photo_to_text')
async def start_converting(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(
        text='üíæ–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç! –ù–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è —ç—Ç–æ '
             '—Å–¥–µ–ª–∞—Ç—å\n'
             '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç, –∞ —Ç–∞–∫–∂–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Ç–µ–∫—Å—Ç–∞ —Å '
             '—Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤', reply_markup=keyboard_cancel)
    await state.set_state('image_convert')


@dp.message_handler(Command('photo_to_text'))
async def start_converting(message: types.Message, state: FSMContext):
    await bot.send_message(chat_id=message.from_user.id,
                           text='–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ —Ñ–æ—Ç–æ, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ç–µ–∫—Å—Ç! –ù–µ–π—Ä–æ—Å–µ—Ç—å –ø–æ—Å—Ç–∞—Ä–∞–µ—Ç—Å—è —ç—Ç–æ '
                                '—Å–¥–µ–ª–∞—Ç—å\n'
                                '–í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—ã–ª–∞—Ç—å –∫–æ–¥ –ø—Ä–æ–≥—Ä–∞–º–º—ã, —Ä—É–∫–æ–ø–∏—Å–Ω—ã–π —Ç–µ–∫—Å—Ç, –∞ —Ç–∞–∫–∂–µ —Å–∫—Ä–∏–Ω—à–æ—Ç—ã —Ç–µ–∫—Å—Ç–∞ —Å '
                                '—Ä–∞–∑–Ω—ã—Ö —Å–∞–π—Ç–æ–≤', reply_markup=keyboard_cancel)
    await state.set_state('image_convert')


@dp.message_handler(state='image_convert', content_types=ContentType.ANY)
async def process_convert(message: types.Message, state: FSMContext):
    try:
        photo = await text_downloader(message=message)
        text = await text_detector(photo=photo)
        await message.edit_text(text=f'‚òëÔ∏è –í–∞—à —Ç–µ–∫—Å—Ç: \n\n'
                                     f'{text}\n\n'
                                     f'–ß—Ç–æ –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ?', parse_mode="", reply_markup=text_actions_keyboard)
        os.remove(photo)
    except:
        await message.answer(text=f'üìõ–ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞! –ú—ã —É–∂–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –æ—á–µ—Ç —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞–º.\n\n'
                                  f'–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ–∏—é <b>–Ω–µ –¥–æ–∫—É–º–µ–Ω—Ç–æ–º</b>',
                             reply_markup=text_actions_keyboard)
    await state.reset_state()


@dp.callback_query_handler(text='cancel', state='image_convert')
async def cancel_convert(call: CallbackQuery, state: FSMContext):
    await call.message.edit_text(text=f'‚ùóÔ∏è–í—ã –æ—Ç–º–µ–Ω–∏–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ –≤ —Ñ–æ—Ç–æ! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å –µ—â–µ?',
                                 reply_markup=text_actions_keyboard)
    await state.reset_state()
